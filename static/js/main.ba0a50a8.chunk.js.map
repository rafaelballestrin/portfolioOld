{"version":3,"sources":["images/about.svg","images/projects.svg","images/contact.svg","Stack.js","Gallery.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Stack","props","react_default","a","createElement","Link","to","concat","id","className","src","logo","alt","name","Gallery","about","projects","contact","Details","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","welcomeMessage","match","params","galleryId","Component","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mQCGzB,SAASC,EAAMC,GAC1B,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,IAAAC,OAAMN,EAAMO,IAAMC,UAAU,QAClCP,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMC,IAAG,GAAAL,OAAKN,EAAMY,KAAX,WACzBX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACbP,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,+DCFN,SAASC,IACtB,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wFAEFF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAACJ,EAAD,CAAOQ,GAAG,UAAUK,KAAK,WAAWF,KAAMI,MAC1Cb,EAAAC,EAAAC,cAACJ,EAAD,CAAOQ,GAAG,WAAWK,KAAK,WAAWF,KAAMK,MAC3Cd,EAAAC,EAAAC,cAACJ,EAAD,CAAOQ,GAAG,UAAUK,KAAK,UAAUF,KAAMM,YCZ5BC,cAEnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,eAAgB,gBAHNR,mFAQIG,KAAKrB,MAAM2B,MAAMC,OAAOC,2CAKxC,OACE5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KAAT,wBAlB+ByB,aCkBtBC,0LAbX,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjCZ,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWnB,cAPrCa,cCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba0a50a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/about.415cbcb8.svg\";","module.exports = __webpack_public_path__ + \"static/media/projects.199dca11.svg\";","module.exports = __webpack_public_path__ + \"static/media/contact.19dd160e.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Stack(props) {\n    return (\n      <Link to={`/${props.id}`} className='item'>\n        <img src={props.logo} alt={`${props.name} logo`} />\n        <div className='overlay'>\n          <h1>{props.name}</h1>\n        </div>\n      </Link>\n    )\n  }","import React from 'react';\nimport Stack from './Stack';\nimport about from './images/about.svg';\nimport projects from './images/projects.svg';\nimport contact from './images/contact.svg';\n\nexport default function Gallery() {\n  return (\n    <div>\n      <div>\n        <h1>Hello, my name is Rafael. I'm a Front End Developer living in London, UK.</h1>\n      </div>\n      <div className='container'>\n        <Stack id='aboutme' name='About me' logo={about} />\n        <Stack id='projects' name='Projects' logo={projects} />\n        <Stack id='contact' name='Contact' logo={contact} />\n      </div>\n    </div>\n  )\n}\n\nfunction getGallery() {\n  return [\n    {id: 'aboutme',  name: 'About Me', logo: about },\n    {id: 'projects', name: 'Projects', logo: projects},\n    {id: 'contact', name: 'Contact', logo: contact},\n  ]\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Details extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      welcomeMessage: 'page details'\n    };\n  }\n\n  componentDidMount() {\n    let galleryId = this.props.match.params.galleryId;\n\n  }\n\n  render() {\n    return (\n      <div>\n      <h1>Details page!</h1>\n      <Link to='/'>Back to Home</Link> \n    </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Gallery from './Gallery';\nimport Details from './Details';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <div className=\"App\">\n            <Route exact path='/' component={Gallery} />\n            <Route exact path='/:galleryId' component={Details} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}